"use strict";(self.webpackChunkcapella_documentation=self.webpackChunkcapella_documentation||[]).push([[2923],{2397:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Cambria FTC/API/Scriptable_Workflow_Guide_Full","title":"Scriptable Workflow Guide","description":"Overview","source":"@site/docs/Cambria FTC/03-API/Scriptable_Workflow_Guide_Full.md","sourceDirName":"Cambria FTC/03-API","slug":"/Cambria FTC/API/Scriptable_Workflow_Guide_Full","permalink":"/docs/Cambria FTC/API/Scriptable_Workflow_Guide_Full","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Scriptable Workflow Guide"}}');var s=i(4848),r=i(8453);const o={title:"Scriptable Workflow Guide"},a="Capella Cambria FTC and Cluster \u2013 Scriptable Workflow Guide",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Before Getting Started",id:"before-getting-started",level:3},{value:"Examples of what Scripts can be used for",id:"examples-of-what-scripts-can-be-used-for",level:3},{value:"How Scripts Work",id:"how-scripts-work",level:3},{value:"Writing a Script",id:"writing-a-script",level:2},{value:"Special Job Settings",id:"special-job-settings",level:3},{value:"Editing / Troubleshooting a Custom Script",id:"editing--troubleshooting-a-custom-script",level:2},{value:"Sample Scripts",id:"sample-scripts",level:2},{value:"ModifyBitrateBasedOnSourceResolution.py",id:"modifybitratebasedonsourceresolutionpy",level:3},{value:"FailIfPAL.py",id:"failifpalpy",level:3},{value:"UseHalfSourceFrameRateIfMoreThan30fps.py",id:"usehalfsourceframerateifmorethan30fpspy",level:3},{value:"PassthroughAudioIfAC3.py (Perl)",id:"passthroughaudioifac3py-perl",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"capella-cambria-ftc-and-cluster--scriptable-workflow-guide",children:"Capella Cambria FTC and Cluster \u2013 Scriptable Workflow Guide"})}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.p,{children:"Scriptable Workflows enable users to customize encoding Job parameters at the beginning of a Job using Python or Perl scripts. These scripts can access video and audio properties of the source material, such as resolution, frame rate, loudness, and complexity, and adjust Job parameters accordingly. If the 'Group of Files' feature is enabled in Watch Folder, the script can access all files in the group and combine them in various ways."}),"\n",(0,s.jsx)(t.h3,{id:"before-getting-started",children:"Before Getting Started"}),"\n",(0,s.jsx)(t.p,{children:"To use Scriptable Workflows, users must be familiar with Cambria FTC and the Job XML format it employs. Job XML contains settings for sources, encoders, multiplexers, filters, as well as notification settings, upload settings, audio mapping, and more. The script will either modify or generate this Job XML."}),"\n",(0,s.jsx)(t.h3,{id:"examples-of-what-scripts-can-be-used-for",children:"Examples of what Scripts can be used for"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Modifying target settings (resolution, frame rate, bitrate, etc.) based on source properties."}),"\n",(0,s.jsx)(t.li,{children:"Automatically failing the Job if a certain source property value exists."}),"\n",(0,s.jsx)(t.li,{children:"Automatically setting source segments (In and Out points)."}),"\n",(0,s.jsx)(t.li,{children:"Setting up complex Jobs, such as subtitling burn-in with titling in/out points controlled through a subtitling file, using the 'Group of Files' option in Watch Folder."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"how-scripts-work",children:"How Scripts Work"}),"\n",(0,s.jsx)(t.p,{children:"Scripts are executed at the start of the Job, before source decoding starts. FTC will analyze the source file and augment the \u2018Source\u2019 section in the original Job XML with source elements and attributes."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Source Location="\\\\storage\\MP4\\movie_6ch.mp4" Duration27MHz="270000000" Name="Src1">\n  <VideoTrackInfo Format="H.264 Video" FrameMode="Progressive" FrameRateDen="1001" FrameRateNum="30000" Height="480" PixelAspectRatioHor="4" PixelAspectRatioVer="3" Width="640" ColorFormat="YUV 420" />\n  <AudioTrackInfo BitsPerSample="16" Format="AAC Audio" NbChannels="6" SampleRate="48000" />\n</Source>\n'})}),"\n",(0,s.jsx)(t.p,{children:"(Additional examples of augmented XML with AnalysisInfo, Muxer, and CompressedProperties were provided.)"}),"\n",(0,s.jsxs)(t.p,{children:["The original Job XML with source information is used as input for the script. The script outputs a new Job XML that is used for transcoding. This process is called ",(0,s.jsx)(t.strong,{children:"Script Transform"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Script Transform Steps:"})}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Script is extracted and saved to file."}),"\n",(0,s.jsx)(t.li,{children:"Original Job XML is saved as Input XML with source properties."}),"\n",(0,s.jsx)(t.li,{children:"CpJobExec executes script (Python/Perl), producing Output XML."}),"\n",(0,s.jsx)(t.li,{children:"CpJobExec reads Output XML and runs transcoding job."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Note: The Input XML, Output XML, and script files are temporary files. These files are automatically\ndeleted once the Output XML is submitted. These files can be preserved by running cpJobExec\nmanually and using the '--s 1' command line option"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Available encoding settings:"})}),"\n",(0,s.jsx)(t.p,{children:"The script can add, remove or modify any settings stored in the Job XML. To get a list of which\nsettings can be modified, use FTC or the Manager to extract a Job XML which contains the desired\nvideo and audio encoders, video or audio filters, notification, upload, audio mapping, etc."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Sample Scripts:"})}),"\n",(0,s.jsx)(t.p,{children:"Sample scripts can be found as part of the FTC installation package, located in:"}),"\n",(0,s.jsx)(t.p,{children:"C:\\Users\\Public\\Documents\\Capella\\Cambria\\Scripts. Users may use them as is, or can customize a\nscript to their liking. Here are names and descriptions for some of the scripts."}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"ModifyBitrateBasedOnSourceResolution.py\nScript looks at the width/height of the source. If it is SD, it sets the H.264 bitrate to 2000bps. If it is\nHD, it sets the bitrate to 5000mbps. [This assumes that the XML setting for bitrate is 'BitrateKbps',\nwhich is not the case for all encoders]."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"FailIfPAL.py\nScript looks at the frame rate and makes the job fail if the frame rate is PAL (ie 25 or 50)."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"FailIfNotHD.py\nScript looks at the frame size and makes the job fail if the width is less than 1280 or if the height is less\nthan 720."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"SetInTimecodeTo_01_00_00_00.py\nScript sets the In Timecode to 01:00:00:00, and sets no Out point (so we keep transcoding until the end\nof the file)."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Create5MinuteSegment.py\nScript set In point at 0 and Out point at 5 minutes."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"UseHalfSourceFrameRateIfMoreThan30fps.pl\nScript inspects the source frame rate. If it is 30 or less, output frame rate is set to source frame rate. If it\nis over 30, output frame rate is set to half of source frame rate. [This assumes that the target can use any\nframe rate, so for example this wouldn't work with DV output]."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"AddPreroll_Postroll.py\nStitches the source file with a preroll and/or postroll source file."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"MapAdditionalAudio.py\nUsed with Watch Folder 'Group of Files'. Combines audio from external sources to the audio of the\nmain source file. This can for example combine audio of different languages into a multi-track source."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"PassthroughAudioIfAC3.py\nIf the source's audio is encoded in AC-3 format, use Audio Passthrough. Otherwise, re-encode audio to\nthe format specified in the original job encoding settings."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"SkipAdaptiveStreamingLayersBasedOnSourceResolution.py\nRemoves any Adaptive Streaming (DASH, Smooth Streaming) layer if that layer's resolution is higher\nthan the source resolution."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"AdaptiveBitrateLadderBasedOnVideoComplexity.py\nMeasures the source video complexity (a measure of how difficult it is to encode) and modifies the\nbitrate for each DASH or HLS layer. Less complex sources will be encoded at lower bitrate than more\ndifficult sources"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"writing-a-script",children:"Writing a Script"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Header/Footer"})}),"\n",(0,s.jsx)(t.p,{children:"Scripts should start with the following code, which validates the inputs (source XML file and output\nXML file) and parses the input into the $data variable. In this document, this code is referred to as the\n'common header'"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"#!/usr/bin/env python3\n\nimport sys\nimport xml.dom.minidom\n\ndef main():\n    if len(sys.argv) != 3:\n        print(\"\\nUsage: ModifyXML.py inputXML outputXML\\n\")\n        return\n\n    inputPath = sys.argv[1]\n    outputPath = sys.argv[2]\n\n    with open(inputPath, 'r') as f:\n        xmlContent = f.read()\n\n    doc = xml.dom.minidom.parseString(xmlContent)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Scripts should end with the following code, which closes the input and output files, and writes the\nmodified Job XML contents into the output location. In this document, this code is referred to as the\n'common footer'."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"with open(outputPath, 'w') as f:\n    f.write(doc.toxml())\n"})}),"\n",(0,s.jsx)(t.h3,{id:"special-job-settings",children:"Special Job Settings"}),"\n",(0,s.jsx)(t.p,{children:"To cause the transcoding to fail:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"job.setAttribute('IsError', '1')\njob.setAttribute('ErrorMessage', 'Source resolution is too low')\n"})}),"\n",(0,s.jsx)(t.p,{children:"To skip transcoding:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"job.setAttribute('NoAction', '1')\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"editing--troubleshooting-a-custom-script",children:"Editing / Troubleshooting a Custom Script"}),"\n",(0,s.jsx)(t.p,{children:"Being able to retain and reuse the temporary files that are created in the Script Transform step can aid\nin script writing and debugging. Here are the steps on how to retain the temporary Script Transform\nfiles."}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Create a Job XML that contains a script. You can do this by \u201cqueuing\u201d an encoding job. Then\nfrom Cambria Manager, right click on the Job and select \u2018Diagnostics\u2019 \u2018Extract Job XML\u2019. A \uf0e0\nJobData.xml file will be created."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Open up command prompt (CMD)"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Change directory to C:\\Program Files (x86)\\Capella\\Cambria\\cpx64"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Run CpJobExec.exe --xml JobData.xml --s 1"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"sample-scripts",children:"Sample Scripts"}),"\n",(0,s.jsx)(t.p,{children:"This section contains the logic of different scripts, with the common header, common footer and\nvariable declaration removed for simplicity."}),"\n",(0,s.jsx)(t.h3,{id:"modifybitratebasedonsourceresolutionpy",children:"ModifyBitrateBasedOnSourceResolution.py"}),"\n",(0,s.jsx)(t.p,{children:"Sets video bitrate to 5000kbps if the source height is 720 pixels or greater. Otherwise, video bitrate is\nset to 2000kbps."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"source = data.getElementsByTagName('Source')[0]\nvideo = source.getElementsByTagName('VideoTrackInfo')[0] if source.getElementsByTagName('VideoTrackInfo') else None\nheight = int(video.getAttribute('Height')) if video else 0\nisHD = height >= 720\nsettings = data.getElementsByTagName('Settings')[0]\nfor _setting in settings.childNodes:\n    if _setting.nodeType == _setting.ELEMENT_NODE and _setting.getAttribute('Type') == 'Video':\n        if not isHD:\n            _setting.setAttribute('BitrateKbps', '2000')\n        else:\n            _setting.setAttribute('BitrateKbps', '5000')\n"})}),"\n",(0,s.jsx)(t.h3,{id:"failifpalpy",children:"FailIfPAL.py"}),"\n",(0,s.jsx)(t.p,{children:"Fails the transcoding job if the source frame rate is 25fps or 50fps."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"source = data.getElementsByTagName('Source')[0]\nvideo = source.getElementsByTagName('VideoTrackInfo')[0]\nframeRateNum = int(video.getAttribute('FrameRateNum'))\nframeRateDen = int(video.getAttribute('FrameRateDen'))\nisPAL = (frameRateNum == 25 and frameRateDen == 1) or (frameRateNum == 50 and frameRateDen == 1)\n\njob = data.getElementsByTagName('Job')[0]\nif not isPAL:\n    job.setAttribute('IsError', '1')\n    job.setAttribute('ErrorMessage', 'Source is not PAL')\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usehalfsourceframerateifmorethan30fpspy",children:"UseHalfSourceFrameRateIfMoreThan30fps.py"}),"\n",(0,s.jsx)(t.p,{children:"Encoding using source's frame rate, or half source's frame rate if it is greater than 30fps."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"source = doc.getElementsByTagName('Source')[0]\nvideo = source.getElementsByTagName('VideoTrackInfo')[0]\n\nif video:\n    frameRateNum = int(video.getAttribute('FrameRateNum'))\n    frameRateDen = int(video.getAttribute('FrameRateDen'))\n    sourceFrameRate = frameRateNum / frameRateDen\n    setSame = 1 if sourceFrameRate <= 30 else 0\n\n    settings = doc.getElementsByTagName('Settings')[0]\n    for setting in settings.childNodes:\n        if setting.getAttribute('Type') == 'Video':\n            if setSame == 0:\n                setting.setAttribute('FrameRate', str(sourceFrameRate / 2))\n            else:\n                setting.setAttribute('FrameRate', str(sourceFrameRate))\n"})}),"\n",(0,s.jsx)(t.h3,{id:"passthroughaudioifac3py-perl",children:"PassthroughAudioIfAC3.py (Perl)"}),"\n",(0,s.jsx)(t.p,{children:"Use Audio Passthrough if the source contains AC-3 audio. Otherwise, re-encode audio as specified in\nthe encoding settings."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-perl",children:"$source = $data->getElementsByTagName('Source')->item(0);\n$audio = $source->getElementsByTagName('AudioTrackInfo')->item(0);\nif($audio)\n{\n    $format = $audio->getAttribute('Format');\n    if ($format eq 'AC-3 Audio') { $isAC3 = 1; }\n\n    $settings = $data->getElementsByTagName('Settings')->item(0);\n    @list = $settings->getChildNodes;\n    for my $_setting (@list)\n    {\n        $type = $_setting->getAttribute('Type');\n        if ($type eq 'Audio')\n        {\n            if ($isAC3 == 1)\n            {\n                $_setting->setAttribute('EncoderName', 'Audio Passthrough');\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>a});var n=i(6540);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);